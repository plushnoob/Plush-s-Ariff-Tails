// got rid of that string format method for a much better version of the code - plush
//looking up
constant array <u8> TLU =
{
	9, 0xd3,0xb0, 0xff
}
//crouching
constant array <u8> TC =
{
	9, 0xd1,0x99, 0xff
}
//skidding
constant array <u8> skid =
{
	7, 0xdb,0x8e, 0xdc,0x8f, 0xff
}
//balancing
constant array <u8> Bal =
{
	11, 0x9a,0xd2,0x9b, 0xff
}
//super idle anim
constant array <u8> Sidle =
{
	11, 0xad,0xd5,0xd6,0xd5,0xad,0xd5,0xd6,0xd5,0xad,0xae,0xaf,0xae, 0xff
}
//# address-hook(0x015862) end(0x015aae)
function void UpdateTailsAnimation()
{
	if (u8[0xffffE654] != 0 && CHARACTER_TAILS)
    {
		base.UpdateTailsAnimation()
		return
	}
			if (char.state != char.state.former)
			{
				char.state.former = char.state
				char.animation.frame = 0
				char.animation.timer = 0
				char.flags &= ~char.flag.PUSHING
			}
			if (char.state == char.state.LOOKING_UP)
			{
				D0.u8 = TLU[0]
				D1.u8 = char.flags & char.flag.FACING_LEFT
				char.render_flags = (char.render_flags & ~(render_flag.FLIP_X | render_flag.FLIP_Y)) | D1.u8

				--char.animation.timer
				if (s8(char.animation.timer) < 0)
				{
					char.animation.timer = D0.u8
					D0.u8 = TLU[char.animation.frame + 1]	// Load next animation frame byte

					if (D0.u8 == 0xff)
					{
						// Loop animation from the start
						char.animation.frame = 2
						char.animation.sprite = TLU[2]
					}
					else
					{
						// Advance to next frame
						char.animation.sprite = D0.u8
						++char.animation.frame
					}
				}
			}
			if (char.state == char.state.STANDING && super.active.tails && superoption )
			{
				D0.u8 = Sidle[0]
				D1.u8 = char.flags & char.flag.FACING_LEFT
				char.render_flags = (char.render_flags & ~(render_flag.FLIP_X | render_flag.FLIP_Y)) | D1.u8

				--char.animation.timer
				if (s8(char.animation.timer) < 0)
				{
					char.animation.timer = D0.u8
					D0.u8 = Sidle[char.animation.frame + 1]	// Load next animation frame byte

					if (D0.u8 == 0xff)
					{
						// Loop animation from the start
						char.animation.frame = 1
						char.animation.sprite = Sidle[1]
					}
					else
					{
						// Advance to next frame
						char.animation.sprite = D0.u8
						++char.animation.frame
					}
				}
			}
			if (char.state == char.state.COWERING)
			{
				D0.u8 = TC[0]
				D1.u8 = char.flags & char.flag.FACING_LEFT
				char.render_flags = (char.render_flags & ~(render_flag.FLIP_X | render_flag.FLIP_Y)) | D1.u8

				--char.animation.timer
				if (s8(char.animation.timer) < 0)
				{
					char.animation.timer = D0.u8
					D0.u8 = TC[char.animation.frame + 1]	// Load next animation frame byte

					if (D0.u8 == 0xff)
					{
						// Loop animation from the start
						char.animation.frame = 2
						char.animation.sprite = TC[2]
					}
					else
					{
						// Advance to next frame
						char.animation.sprite = D0.u8
						++char.animation.frame
					}
				}
			}
			if (char.state == char.state.BRAKING)
			{
				D0.u8 = skid[0]
				D1.u8 = char.flags & char.flag.FACING_LEFT
				char.render_flags = (char.render_flags & ~(render_flag.FLIP_X | render_flag.FLIP_Y)) | D1.u8

				--char.animation.timer
				if (s8(char.animation.timer) < 0)
				{
					char.animation.timer = D0.u8
					D0.u8 = skid[char.animation.frame + 1]	// Load next animation frame byte

					if (D0.u8 == 0xff)
					{
						// Loop animation from the start
						char.animation.frame = 4
						char.animation.sprite = skid[4]
					}
					else
					{
						// Advance to next frame
						char.animation.sprite = D0.u8
						++char.animation.frame
					}
				}
			}
			if (char.state == char.state.BALANCING1)
			{
				D0.u8 = Bal[0]
				D1.u8 = char.flags & char.flag.FACING_LEFT
				char.render_flags = (char.render_flags & ~(render_flag.FLIP_X | render_flag.FLIP_Y)) | D1.u8

				--char.animation.timer
				if (s8(char.animation.timer) < 0)
				{
					char.animation.timer = D0.u8
					D0.u8 = Bal[char.animation.frame + 1]	// Load next animation frame byte

					if (D0.u8 == 0xff)
					{
						// Loop animation from the start
						char.animation.frame = 1
						char.animation.sprite = Bal[1]
					}
					else
					{
						// Advance to next frame
						char.animation.sprite = D0.u8
						++char.animation.frame
					}
				}
			}
			A1 = 0x015ab0
			A1 = tableLookupAddress(A1, char.state * 2)
			
			D0.u8 = u8[A1]

			if (D0.u8 < 0x80)
			{
				updateSonicAnimationStanding()
			}
			else if (D0.u8 == 0xff)
			{
				updateSonicAnimationRunning()
			}
			else if (D0.u8 == 0xfe)
			{
				updateSonicAnimationRolling()
			}
	else
	{
		base.UpdateTailsAnimation()
		return
	}
}